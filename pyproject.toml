[tool.poetry]
name = "pyproject-maker"
version = "0.9.3"
description = "A command line app to create a Python project skeleton."
authors = ["Grant Ramsay <seapagan@gmail.com>"]
readme = "README.md"
license = "MIT"

repository = "https://github.com/seapagan/py-maker"
homepage = "https://py-maker.seapagan.net"
documentation = "https://py-maker.seapagan.net"

classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Utilities",
]

packages = [{ include = "py_maker" }]

[tool.poetry.urls]
"Pull Requests" = "https://github.com/seapagan/py-maker/pulls"
"Bug Tracker" = "https://github.com/seapagan/py-maker/issues"
"Changelog" = "https://github.com/seapagan/py-maker/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
pymaker = "py_maker.main:app"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
typer = { extras = ["all"], version = "^0.9.0" }
jinja2 = "^3.1.2"
gitpython = "^3.1.32"
pydantic = "^2.4"
rich = "^13.4.2"
rtoml = "^0.9.0"
requests = "^2.31.0"
pygithub = "^2.1.1"
simple-toml-settings = "^0.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configure dev dependencies
[tool.poetry.group.dev.dependencies]
# linting, type-checking and security checks
mypy = "^1.4.1"
pre-commit = "^3.3.3"
pymarkdownlnt = "^0.9.12"
ruff = "^0.1.3"

# testing
pytest = "^7.4.0"
pytest-cov = "^4.0.0"
pytest-xdist = "^3.2.1"
pytest-sugar = "^0.9.7"
pytest-randomly = "^3.13.0"
pytest-reverse = "^1.7.0"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.11.1"
mock = "^5.1.0"
faker = ">=19.2,<21.0"
pyfakefs = "^5.2.4"

# documentation
github-changelog-md = ">=0.3,<0.8"
mkdocs = "^1.4.3"
mkdocs-autorefs = "^0.5.0"
mkdocs-material = "^9.1.19"
mkdocs-git-revision-date-localized-plugin = "^1.2.0"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-minify-plugin = "^0.7.0"
mkdocstrings = ">=0.22,<0.24"
pymdown-extensions = "^10.1"
pygments = "^2.15.1"

# typing stubs
types-requests = "^2.31.0.2"

# assorted utilities
poethepoet = "^0.24.0"

[tool.poe.tasks]
# setup 'PoeThePoet' tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy py_maker/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r py_maker/**/[!CHANGELOG]*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# testing with pytest
test.cmd = "pytest"
test.help = "Run all tests (pytest)"

# tasks to deal with documentation
"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# Generate a CHANGELOG.md
changelog.cmd = "github-changelog-md -r py-maker"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false

[tool.ruff]
line-length = 80
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us 😝
extend-ignore = ["COM812", "ISC001"] # these are ignored for ruff formatting

src = ["py_maker"]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
]
"py_maker/main.py" = ["UP007", "PLR0913"] # These cause issues in Typer Apps
"py_maker/commands/*.py" = ["UP007", "PLR0913"] # Same as above

[tool.ruff.isort]
known-first-party = ["py_maker"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = ["--cov", "--cov-report", "term-missing", "--cov-report", "html"]
filterwarnings = []
mock_use_standalone_module = true

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]
