{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Project Generation Tool","text":"<p>A fully customizable Python application to bootstrap Poetry-based boilerplate for you to start developing your Python applications quicker! Includes linting and Pytest libraries.</p> <p>It will create a new directory for your project (or use the current directory), initialise a git repository, create a virtual environment, and install some basic dependencies for Testing, Linting and more. Optionally, it can also create a GitHub repository for you and push the initial commit(s).</p> <p>Latest Version : v0.12.0</p>"},{"location":"#testing","title":"Testing","text":"<p>The generated project includes pytest and some related plugins to allow you to set up testing straight away.</p> <p>Write your tests in the <code>tests</code> directory and run them with <code>pytest</code>.</p>"},{"location":"#linting","title":"Linting","text":"<p>The generated project includes Ruff for linting and code style formatting. Mypy is installed for type checking. These are set quite strictly by default, but you can edit the tools configuration in the <code>pyproject.toml</code> file.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The generated project includes mkdocs and a generated skeleton for you to get started with your documentation.  The documentation is written in Markdown and can be found in the <code>docs</code> directory. The project will also include the mkdocs-material theme, which is a popular theme for MkDocs used in many open-source projects.</p> <p>Tip</p> <p>The Testing, Linting and Documentation tools are all optional and can be removed or replaced with your preferred tools. There is also a <code>--bare</code> option to generate a project without any of these tools.</p>"},{"location":"#customize-the-generated-project","title":"Customize the generated project","text":"<p>You can add extra or edited files to the generated project by adding them to the <code>~/.pymaker/template</code> directory.  The files in this directory will be copied into the generated project, overwriting any existing files with the same name.</p> <p>It is also possible to dump the whole template into this folder or the current folder so full customization and even removal of files is possible.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>The generated project uses pre-commit to run some checks on the code before it is committed.  This is a great tool to help keep your code clean.</p> <p>To install pre-commit, run the following command from inside your venv:</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre>"},{"location":"#github-actions-and-configuration","title":"GitHub Actions and Configuration","text":"<p>By default the generated project includes a GitHub Actions workflow to run Dependabot to keep your dependencies up to date. There are also standard templates for Pull Request and Issues.</p> <p>The plan is to add more workflows in the future, for example running tests and more.</p>"},{"location":"#changelog-generator","title":"Changelog Generator","text":"<p>Once you have at least one GitHub release, you can generate a <code>CHANGELOG.md</code> file automatically from this, using the included github-changelog-md tool.</p> <p>You can run this manually by running the following command from inside your virtual environment:</p> <pre><code>$ poe changelog\n</code></pre> <p>You need to have a GitHub Personal Access Token set in the config file, see the instructions here for more information.</p>"},{"location":"#community-related-files","title":"Community related files","text":"<p>To aid in community building, the generated project includes a <code>CODE_OF_CONDUCT.md</code> file.  This is based on the Contributor Covenant standard.</p> <p>Future releases will include other Community related files (for example an <code>AUTHORS</code> file). There are also blank <code>CONTRIBUTING.md</code> and <code>CHANGELOG.md</code> files. The <code>CHANGELOG.md</code> file can be auto-generated.</p>"},{"location":"#contributing-to-this-project","title":"Contributing to this Project","text":"<p>For information on how to contribute to the project, see the <code>CONTRIBUTING.md</code> file in the root of the repository or on this website</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>This is an auto-generated log of all the changes that have been made to the project since the first release.</p> <p>This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v0120-may-08-2024","title":"v0.12.0 (May 08, 2024)","text":"<p>New Features</p> <ul> <li>Only ask for repo name if we are creating a git repo (#405) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Validate urls inputed by the user (#406) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Refactor the main <code>Pymaker</code> class (#404) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v0110-may-07-2024","title":"v0.11.0 (May 07, 2024)","text":"<p>Closed Issues</p> <ul> <li>Several instances in the generated <code>pyproject.toml</code> still point to the <code>py_maker</code> folder. (#387) by seapagan</li> <li>Initial update to <code>.pre-commit.yaml</code> should be added to the git repo if applicable (#386) by seapagan</li> <li>Tests crash on a newly created project (#385) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Ensure a second commit is created if the pre-commit is updated (#398) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix some 'py_maker' folder references ending up in the generated projects (#396) by seapagan</li> <li>Fix Tests crash on a newly created project (#395) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump rtoml from 0.9.0 to 0.10.0 (#402) by dependabot[bot]</li> <li>Build(deps): bump typer from 0.9.4 to 0.12.3 (#401) by dependabot[bot]</li> <li>Update multiple deps to latest versions (#400) by seapagan</li> <li>Update pre-commit to latest tools (#399) by seapagan</li> <li>Build(deps-dev): bump ruff from 0.4.2 to 0.4.3 (#394) by dependabot[bot]</li> <li>Build(deps): bump simple-toml-settings from 0.6.0 to 0.6.1 (#393) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 25.0.0 to 25.0.1 (#392) by dependabot[bot]</li> <li>Build(deps-dev): bump pygments from 2.17.2 to 2.18.0 (#391) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocstrings from 0.25.0 to 0.25.1 (#390) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.5.20 to 9.5.21 (#389) by dependabot[bot]</li> <li>and 1 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v0103-may-01-2024","title":"v0.10.3 (May 01, 2024)","text":"<p>This is a security release to fix several vulnerabilities in dependency packages.</p> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump pymarkdownlnt from 0.9.18 to 0.9.19 (#383) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-git-revision-date-localized-plugin from 1.2.4 to 1.2.5 (#382) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.25.0 to 0.26.1 (#381) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 24.4.0 to 25.0.0 (#380) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest-xdist from 3.5.0 to 3.6.1 (#379) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.5.17 to 9.5.20 (#378) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest from 8.1.1 to 8.2.0 (#377) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocstrings from 0.24.2 to 0.25.0 (#375) by dependabot[bot]</li> <li>Build(deps-dev): bump pymdown-extensions from 10.7.1 to 10.8.1 (#374) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.3.5 to 0.4.2 (#371) by dependabot[bot]</li> <li>and 20 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v0102-march-13-2024","title":"v0.10.2 (March 13, 2024)","text":"<p>Closed Issues</p> <ul> <li>License name is missing in the generated README (#321) by seapagan</li> <li>The templates for some generated files need updating (#320) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Add pytest watcher task (#326) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix some bugs in the template files and update obsolete information (#325) by seapagan</li> <li>Fix missing license name in generated README (#324) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump pydantic from 2.6.3 to 2.6.4 (#323) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v0101-march-12-2024","title":"v0.10.1 (March 12, 2024)","text":"<p>Closed Issues</p> <ul> <li>Empty string for 'homepage' in <code>pyproject.html</code> crashes Poetry (#317) by seapagan</li> </ul> <p>Testing</p> <ul> <li>Add unit tests for the <code>Settings</code> module (#310) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix bug where bad homepage field crashes <code>poetry install</code> (#318) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Convert settings module to use new <code>get_settings()</code> method (#309) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Update Docs to mention previous linting changes (#305) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump simple-toml-settings from 0.5.0 to 0.6.0 (#316) by dependabot[bot]</li> <li>Build(deps-dev): bump mypy from 1.8.0 to 1.9.0 (#315) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.20240218 to 2.31.0.20240311 (#314) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest from 8.1.0 to 8.1.1 (#313) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 24.0.0 to 24.1.0 (#312) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.3.1 to 0.3.2 (#311) by dependabot[bot]</li> <li>Build(deps): bump simple-toml-settings from 0.4.0 to 0.5.0 (#307) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.3.0 to 0.3.1 (#306) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v0100-march-06-2024","title":"v0.10.0 (March 06, 2024)","text":"<p>Closed Issues</p> <ul> <li>When missing the config file, it does not properly read the users Git username/email (#291) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix bug in post create-file hook (#300) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump mkdocs-material from 9.5.12 to 9.5.13 (#303) by dependabot[bot]</li> <li>Build(deps-dev): bump pymdown-extensions from 10.7 to 10.7.1 (#302) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 23.3.0 to 24.0.0 (#301) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v095-march-04-2024","title":"v0.9.5 (March 04, 2024)","text":"<p>Closed Issues</p> <ul> <li>For standalone app, the suggested GitHub URL is wrong, it should be the same as if the app was a package (#296) by seapagan</li> <li>Template deps need updating and template config files need a freshening (#294) by seapagan</li> <li>Standalone app should have the ending text changed. (#293) by seapagan</li> <li>If creating a standalone, <code>poetry install</code> should set 'package-mode=false' in the pyproject.toml (#292) by seapagan</li> </ul> <p>Merged Pull Requests</p> <ul> <li>Fix formatting to new Ruff 3.0 (#289) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Update deps and template, freshen the template config files. (#297) by seapagan</li> </ul> <p>Testing</p> <ul> <li>Continue writing tests. (#267) by seapagan</li> <li>Add a testing stage to CI with coverage reports from codacy (#266) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Ask for repo name and offer to create for both type of projects (#298) by seapagan</li> <li>Fix several issues with generating standalone projects (#295) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump pytest from 8.0.2 to 8.1.0 (#290) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.2.1 to 0.3.0 (#288) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-autorefs from 0.5.0 to 1.0.1 (#287) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.5.9 to 9.5.12 (#286) by dependabot[bot]</li> <li>Build(deps): bump rich from 13.7.0 to 13.7.1 (#285) by dependabot[bot]</li> <li>Build(deps): bump pydantic from 2.6.1 to 2.6.3 (#284) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 23.2.0 to 23.3.0 (#282) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocstrings from 0.24.0 to 0.24.1 (#281) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest from 8.0.0 to 8.0.2 (#280) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.24.4 to 0.25.0 (#277) by dependabot[bot]</li> <li>and 35 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v094-december-11-2023","title":"v0.9.4 (December 11, 2023)","text":"<p>This is a security release that fixes a vulnerability in the 'cryptography' package.</p> <p>Refactoring</p> <ul> <li>Update pre commit config to use poetry-export-plugin directly (#203) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump mkdocs-material from 9.4.8 to 9.5.1 (#216) by dependabot[bot]</li> <li>Build(deps): bump actions/stale from 8 to 9 (#215) by dependabot[bot]</li> <li>Build(deps-dev): bump ruff from 0.1.5 to 0.1.7 (#214) by dependabot[bot]</li> <li>Build(deps): bump cryptography from 41.0.5 to 41.0.6 (#213) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest-xdist from 3.4.0 to 3.5.0 (#209) by dependabot[bot]</li> <li>Build(deps-dev): bump pygments from 2.16.1 to 2.17.2 (#208) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 20.0.3 to 20.1.0 (#206) by dependabot[bot]</li> <li>Build(deps): bump rich from 13.6.0 to 13.7.0 (#202) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocstrings from 0.23.0 to 0.24.0 (#201) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.24.3 to 0.24.4 (#200) by dependabot[bot]</li> <li>and 16 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v093-october-29-2023","title":"v0.9.3 (October 29, 2023)","text":"<p>Refactoring</p> <ul> <li>Run Ruff on github actions (#174) by seapagan</li> <li>Migrate linting and formatting to Ruff (#173) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump faker from 19.10.0 to 19.12.0 (#172) by dependabot[bot]</li> <li>Build(deps-dev): bump black from 23.10.0 to 23.10.1 (#171) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint from 3.0.1 to 3.0.2 (#170) by dependabot[bot]</li> <li>Build(deps-dev): bump mypy from 1.6.0 to 1.6.1 (#168) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint-pytest from 1.1.2 to 1.1.3 (#167) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v092-october-24-2023","title":"v0.9.2 (October 24, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Migrate to new changelog generator (#165) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump simple-toml-settings from 0.2.2 to 0.3.0 (#163) by dependabot[bot]</li> <li>Build(deps-dev): bump pymdown-extensions from 10.3 to 10.3.1 (#162) by dependabot[bot]</li> <li>Build(deps-dev): bump pytest-mock from 3.11.1 to 3.12.0 (#161) by dependabot[bot]</li> <li>Build(deps-dev): bump black from 23.9.1 to 23.10.0 (#160) by dependabot[bot]</li> <li>Build(deps): bump gitpython from 3.1.37 to 3.1.40 (#159) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.8 to 2.31.0.10 (#158) by dependabot[bot]</li> <li>Build(deps-dev): bump flake8-type-checking from 2.4.2 to 2.5.1 (#157) by dependabot[bot]</li> <li>Build(deps): bump urllib3 from 2.0.6 to 2.0.7 (#156) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.4.5 to 9.4.6 (#154) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-git-revision-date-localized-plugin from 1.2.0 to 1.2.1 (#152) by dependabot[bot]</li> <li>and 1 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v091-october-12-2023","title":"v0.9.1 (October 12, 2023)","text":"<p>Bug Fixes</p> <ul> <li>Remove extra '__init__.py' file (#150) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump faker from 19.8.0 to 19.10.0 (#149) by dependabot[bot]</li> <li>Build(deps-dev): bump mypy from 1.5.1 to 1.6.0 (#147) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v090-october-10-2023","title":"v0.9.0 (October 10, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Unlock 'poethepoet' upgrades (#142) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Migrate settings to my 'simple-toml-settings' library (#146) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump mkdocs-material from 9.4.4 to 9.4.5 (#145) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint from 2.17.7 to 3.0.1 (#144) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 19.6.2 to 19.8.0 (#143) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint-pydantic from 0.2.4 to 0.3.0 (#139) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.4.3 to 9.4.4 (#138) by dependabot[bot]</li> <li>Build(deps-dev): bump flake8-type-checking from 2.4.1 to 2.4.2 (#137) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.7 to 2.31.0.8 (#136) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v080-october-04-2023","title":"v0.8.0 (October 04, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Add help to poe tasks (#130) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Automatically create a GitHub repository for the new project (#134) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Migrate tomli lib to rtoml (#131) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps-dev): bump mkdocs-material from 9.4.2 to 9.4.3 (#133) by dependabot[bot]</li> <li>Build(deps): bump urllib3 from 2.0.4 to 2.0.6 (#132) by dependabot[bot]</li> <li>Build(deps): bump rich from 13.5.3 to 13.6.0 (#128) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint from 2.17.6 to 2.17.7 (#127) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.6 to 2.31.0.7 (#126) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.23.0 to 0.24.0 (#125) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v070-october-01-2023","title":"v0.7.0 (October 01, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Improve typing across the package (#115) by seapagan</li> <li>Adjust suggested git repo name (#103) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Implement 'config edit' command (#124) by seapagan</li> <li>Add '--bare' option (#123) by seapagan</li> <li>Add '--standalone' CLI flag (#113) by seapagan</li> <li>Add optional  github_token setting (#106) by seapagan</li> <li>Store and use GitHub username (#104) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Adjust and clarify some docs (#114) by seapagan</li> <li>Add a contributing guide (#109) by seapagan</li> <li>Add a POE Task to automatically create and update the CHANGELOG.md (#107) by seapagan</li> <li>Add MkDocs Tasks to the Documentation (#105) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump pydantic from 2.3.0 to 2.4.2 (#122) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.4 to 2.31.0.6 (#120) by dependabot[bot]</li> <li>Build(deps-dev): bump pylint from 2.17.5 to 2.17.6 (#119) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.3 to 2.31.0.4 (#112) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.4.0 to 9.4.2 (#111) by dependabot[bot]</li> <li>Build(deps-dev): bump poethepoet from 0.22.1 to 0.23.0 (#110) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v062-september-24-2023","title":"v0.6.2 (September 24, 2023)","text":"<p>Closed Issues</p> <ul> <li>--version flag does not work. (#101) by seapagan</li> </ul> <p>Merged Pull Requests</p> <ul> <li>Add poe tasks for documentation if mkdocs enabled (#100) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix #101 (--version flag does not work) (#102) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v061-september-23-2023","title":"v0.6.1 (September 23, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Update tool versions in both pre-commit configs (#99) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix typos and wording in the generated readme (#98) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Remove dependency spam from changelog (#97) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump gitpython from 3.1.36 to 3.1.37 (#96) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.3.2 to 9.4.0 (#95) by dependabot[bot]</li> <li>Build(deps-dev): bump types-requests from 2.31.0.2 to 2.31.0.3 (#94) by dependabot[bot]</li> <li>Build(deps-dev): bump faker from 19.6.1 to 19.6.2 (#93) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs from 1.5.2 to 1.5.3 (#92) by dependabot[bot]</li> <li>Build(deps-dev): bump mkdocs-material from 9.3.1 to 9.3.2 (#91) by dependabot[bot]</li> <li>Build(deps): bump rich from 13.5.2 to 13.5.3 (#90) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v060-september-14-2023","title":"v0.6.0 (September 14, 2023)","text":"<p>New Features</p> <ul> <li>Auto install and update 'pre commit' (#88) by seapagan</li> <li>Add code of conduct to project and the template (#87) by seapagan</li> <li>Add Github templates to the default output template (#86) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Build(deps): bump actions/stale from 5 to 8 (#89) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v051-september-12-2023","title":"v0.5.1 (September 12, 2023)","text":"<p>New Features</p> <ul> <li>Add --version command to CLI (#63) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Add missing 'requests' library to pyproject.toml (#82) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.6.0 to 19.6.1 (#85) by dependabot[bot]</li> <li>Bump gitpython from 3.1.35 to 3.1.36 (#84) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.2.8 to 9.3.1 (#83) by dependabot[bot]</li> <li>Bump pymarkdownlnt from 0.9.13.3 to 0.9.13.4 (#80) by dependabot[bot]</li> <li>Bump faker from 19.3.1 to 19.6.0 (#79) by dependabot[bot]</li> <li>Bump black from 23.7.0 to 23.9.1 (#78) by dependabot[bot]</li> <li>Bump pytest from 7.4.0 to 7.4.2 (#77) by dependabot[bot]</li> <li>Bump gitpython from 3.1.33 to 3.1.35 (#76) by dependabot[bot]</li> <li>Bump pymarkdownlnt from 0.9.13 to 0.9.13.3 (#74) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.2.7 to 9.2.8 (#73) by dependabot[bot]</li> <li>and 8 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v050-august-31-2023","title":"v0.5.0 (August 31, 2023)","text":"<p>New Features</p> <ul> <li>Ask for homepage &amp; repository if not standalone (#61) by seapagan</li> <li>Update template toml and pre-commit deps (#58) by seapagan</li> <li>Override config options from command line (#55) by seapagan</li> <li>Check PyPI for existing packages (#46) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix unable to create standalone app (#60) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Override config options from command line (#55) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Update docs for latest additions (#59) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump mkdocs-material from 9.2.3 to 9.2.6 (#57) by dependabot[bot]</li> <li>Bump pymdown-extensions from 10.1 to 10.2.1 (#56) by dependabot[bot]</li> <li>Bump pymdown-extensions from 10.1 to 10.2 (#54) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.2.3 to 9.2.5 (#53) by dependabot[bot]</li> <li>Bump pydantic from 2.1.1 to 2.3.0 (#52) by dependabot[bot]</li> <li>Bump faker from 19.3.0 to 19.3.1 (#51) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.1.21 to 9.2.3 (#50) by dependabot[bot]</li> <li>Bump mypy from 1.5.0 to 1.5.1 (#45) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v045-august-17-2023","title":"v0.4.5 (August 17, 2023)","text":"<p>New Features</p> <ul> <li>Work on the TODO list. See commits for details (#44) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump pytest-randomly from 3.14.0 to 3.15.0 (#43) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v044-august-15-2023","title":"v0.4.4 (August 15, 2023)","text":"<p>New Features</p> <ul> <li>Add mkdocs as an option (#42) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump poethepoet from 0.21.1 to 0.22.0 (#41) by dependabot[bot]</li> <li>Bump pytest-randomly from 3.13.0 to 3.14.0 (#40) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v043-august-13-2023","title":"v0.4.3 (August 13, 2023)","text":"<p>New Features</p> <ul> <li>Tweak linting (#39) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump mypy from 1.4.1 to 1.5.0 (#38) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v042-august-10-2023","title":"v0.4.2 (August 10, 2023)","text":"<ul> <li>Added a missing runtime dep (rtoml). It must have been in my venv but not in the <code>pyproject.toml</code> \ud83d\ude44</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v041-august-10-2023","title":"v0.4.1 (August 10, 2023)","text":"<ul> <li>Fixed bug where the first-time config file gets the wrong default template path.</li> <li>Update the internal template <code>pyproject.toml</code> and <code>.pre-commit-config.yaml</code> to use latest dependencies</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v040-august-10-2023","title":"v0.4.0 (August 10, 2023)","text":"<p>New Features</p> <ul> <li>Implement custom template additions (#31) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Implement custom template additions (#31) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.2.0 to 19.3.0 (#37) by dependabot[bot]</li> <li>Bump pygments from 2.15.1 to 2.16.1 (#36) by dependabot[bot]</li> <li>Bump mkdocs from 1.5.1 to 1.5.2 (#35) by dependabot[bot]</li> <li>Bump rich from 13.5.0 to 13.5.2 (#34) by dependabot[bot]</li> <li>Bump mkdocs-minify-plugin from 0.7.0 to 0.7.1 (#33) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v030-july-30-2023","title":"v0.3.0 (July 30, 2023)","text":"<p>New Features</p> <ul> <li>Add a configuration file (#30) by seapagan</li> <li>Use conditional logic in templates (#24) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Use conditional logic in templates (#24) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump mkdocs-material from 9.1.19 to 9.1.21 (#29) by dependabot[bot]</li> <li>Bump mkdocs from 1.4.3 to 1.5.1 (#28) by dependabot[bot]</li> <li>Bump pylint from 2.17.4 to 2.17.5 (#26) by dependabot[bot]</li> <li>Bump pydantic from 2.0.3 to 2.1.1 (#22) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v021-july-26-2023","title":"v0.2.1 (July 26, 2023)","text":"<p>New Features</p> <ul> <li>Add a documentation site (#23) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Add a documentation site (#23) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v020-july-26-2023","title":"v0.2.0 (July 26, 2023)","text":"<p>Refactoring</p> <ul> <li>Move licenses out of template folder (#21) by seapagan</li> <li>Subclass the Rich prompt locally (#20) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump pytest-asyncio from 0.21.0 to 0.21.1 (#19) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.0 to 2.4.1 (#18) by dependabot[bot]</li> <li>Bump gitpython from 3.1.31 to 3.1.32 (#17) by dependabot[bot]</li> <li>Bump pydantic from 2.0.2 to 2.0.3 (#16) by dependabot[bot]</li> <li>Bump mock from 5.0.2 to 5.1.0 (#15) by dependabot[bot]</li> <li>Bump faker from 18.11.2 to 19.2.0 (#14) by dependabot[bot]</li> <li>Bump poethepoet from 0.20.0 to 0.21.1 (#12) by dependabot[bot]</li> <li>Bump pytest-reverse from 1.6.0 to 1.7.0 (#10) by dependabot[bot]</li> <li>Bump black from 23.3.0 to 23.7.0 (#9) by dependabot[bot]</li> <li>Bump pytest-randomly from 3.12.0 to 3.13.0 (#8) by dependabot[bot]</li> <li>and 1 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#v010-july-06-2023","title":"v0.1.0 (July 06, 2023)","text":"<p>Merged Pull Requests</p> <ul> <li>Add base app functionality (#1) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Customize or remove the Package layout (#5) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Refactor the src template layout and logic (#2) by seapagan</li> </ul> <p>This changelog was generated using github-changelog-md by Seapagan</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration-file","title":"Configuration file","text":"<p>This app needs minimal configuration, most options default to <code>True</code>. The configuration is stored in a <code>TOML</code> file in a sub-folder of the user's home directory. By default (and currently the only option) this file is stored in <code>~/.pymaker/config.toml</code>. An example of this file is:</p> <pre><code>[pymaker]\nauthor_email = \"user@server.com\"\nauthor_name = \"Python User\"\ndefault_license = \"MIT\"\ngithub_username = \"githubuser\" # optional\ngithub_token = \"ghp_1234567890abcdefghij\" # optional\ngithub_protocol = \"ssh\"\ninclude_linters = true\ninclude_mkdocs = true\ninclude_testing = true\ninstall_pre_commit = true\nschema_version = \"1.0\" # for internal use, generally don't change this\ntemplate_folder = \"/home/user/.pymaker/template\"\nuse_default_template = true\nuse_git = true\ncreate_remote = true\n</code></pre> <p>If this file does not exist, it will be created on first run. The app will ask for the values of <code>author_name</code>, <code>author_email</code>, <code>default_license</code> and <code>github_username</code>. For <code>author_name</code> and <code>author_email</code> it will try to use the current global git user name and email if they are set as defaults, though the user can override these.</p>"},{"location":"configuration/#configuration-options","title":"Configuration options","text":"<p>The following options are available for configuring Py-Maker:</p> <ul> <li><code>author_email</code>: The email address of the author.</li> <li><code>author_name</code>: The name of the author.</li> <li><code>default_license</code>: The default license to use for the project.</li> <li><code>github_username</code>: The GitHub username of the author [optional].</li> <li><code>github_token</code>: The GitHub Personal Access Token of the author [optional]. See   below for more information.</li> <li><code>github_protocol</code>: The protocol to use for GitHub, either <code>ssh</code> or <code>https</code>,   defaults to <code>ssh</code> which means that the user will need to have set up an   SSH key with GitHub and added it to their account. If you wish to use HTTPS,   you will be asked for your GitHub password every time you push to the remote   repository.</li> <li><code>include_linters</code>: Whether to include linters in the project, defaults to   <code>true</code></li> <li><code>include_mkdocs</code>: Whether to include MkDocs in the project, defaults to   <code>true</code></li> <li><code>include_testing</code>: Whether to include testing in the project, defaults to   <code>true</code></li> <li><code>install_pre_commit</code>: Whether to install pre-commit hooks, defaults to   <code>true</code></li> <li><code>schema_version</code>: The version of the configuration schema. This should not   be modified by hand. Currently, and until version 1.0 is released, this is   set to \"none\" to indicate that the schema is not yet stable.</li> <li><code>template_folder</code>: The path to the template folder.</li> <li><code>use_default_template</code>: Whether to use the default template, defaults to   <code>true</code></li> <li><code>use_git</code>: Whether to use Git for version control, defaults to   <code>true</code></li> <li><code>create_remote</code>: Whether to create a remote repository on GitHub, defaults to   <code>true</code></li> </ul> <p>All of the boolean options are set to <code>true</code> by default. The <code>template_folder</code> is set to the default template folder, which is <code>~/.pymaker/template</code>. The <code>schema_version</code> is for internal use, and should not be changed by the user.</p>"},{"location":"configuration/#view-configuration","title":"View configuration","text":"<p>You can list the current configuration with the command:</p> <pre><code>$ pymaker config show\n</code></pre>"},{"location":"configuration/#edit-the-configuration-file","title":"Edit the configuration file","text":"<p>You can edit the configuration file with the command:</p> <pre><code>$ pymaker config edit\n</code></pre> <p>This will open the configuration file in your default editor. Under linux it will try to use <code>xdg-open</code> to open the file, and if that fails, it will try to use a few different editors until it finds one that works. Under Windows and Mac it will try to use the default editor.</p> <p>You may also edit the configuration file manually, by default it is stored in <code>~/.pymaker/config.toml</code>.</p>"},{"location":"configuration/#set-configuration","title":"Set configuration","text":"<p>The configuration is set the first time you run the app, but you can change these defaults at any time using the command:</p> <pre><code>$ pymaker config change\n</code></pre> <p>The latter command will prompt you for the values of <code>Author name</code>, <code>Author Email</code>, <code>Default License</code> and <code>GitHub Username</code>, then update the configuration file.</p>"},{"location":"configuration/#add-a-github-personal-access-token","title":"Add a GitHub Personal Access Token","text":"<p>This app is able to create a new GitHub repository for you. To do this, it will need a GitHub Personal Access Token. You can create a new token by going to GitHub Personal Access Tokens and clicking on the \"Generate new token\" button. Use the 'Classic' token option unless you really need more control. Unless you want to use the token on Private repositories, you should check the <code>public_repo</code> option and leave all the other permissions unchecked (this tool does not yet have the option to create a private repository). Give it a name (for your reference only) and chose an expiry date. You can choose never to expire, but this is not recommended. Once you have created the token, copy it (it will only be shown once, so make sure you copy it now). Then run the command:</p> <pre><code>$ pymaker config token\n</code></pre> <p>This will accept the token and store it in the configuration file. You can change the token at any time by running the same command again.</p> <p>NEVER PUSH THE CONFIG FILE TO A REPOSITORY!!!</p> <p>This shouldnt ever happen since the file is stored in the user's home directory, but it is worth mentioning. If you didn't choose any extra permissions, then the worst that can happen is that someone can use your token to create a new repository. This token is READ-ONLY, so it can't be used to do anything malicious, but it is still a good idea to keep it secret.</p>"},{"location":"configuration/#manually-editing-the-configuration-file","title":"Manually editing the configuration file","text":"<p>The configuration file is stored in TOML format, and can be edited manually if you wish. The file is stored in <code>~/.pymaker/config.toml</code> by default. The configuration file is created on first run, so if you have not run the app yet, you will need to create the file manually.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-py-maker","title":"Contributing to Py-Maker","text":"<p>Thank you for your interest in contributing to <code>Py-Maker</code>! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue. You can also check the TODO List for ideas.</p> <p>I also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a Pull Request.</p> <p>I you would like to contribute to the code, but find the requirements below a bit daunting, please feel free to open a discussion and I can help you get started, or even pair on a PR.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager. This project requires Python 3.9 or higher.</p> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set the use their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#using-pip","title":"Using Pip","text":"<p>If you prefer to use <code>pip</code> instead of <code>poetry</code>, you can install the dependencies using the auto-generated <code>requirements-dev.txt</code> file:</p> <pre><code>$ pip install -r requirements-dev.txt\n</code></pre> <p>However, Poetry is the recommended (and only supported) way of developing this project and is tightly integrated with the code and tools.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>I am quite strict about linting and code formatting and have set up a number of pre-commit hooks and tasks to ensure that the code meets the required standards.</p> <p>Use the <code>poe ruff</code>, <code>poe format</code> and <code>poe mypy</code> tasks regularly. If you use VSCode, install the <code>Ruff</code> and<code>MyPy</code> extensions and set them to run on save. The included <code>.vscode</code> folder has the settings for this.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please install this if you are intending to contribute to the project. It will check commits locally before they are pushed up to the Repo. The GitHub CI runs the linting checks (and in future probably MyPy as well), and will fail if there are any errors.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing.</p> <p>At the moment the test framework is set up but we only have about 50% coverage. We will be adding more tests as we go along - and most definitely welcome any contributions to this area!</p> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions. Currently we are not enforcing this until we have better coverage of the code - however if you break any existing tests, the CI will fail.</p> <p>There is a task set up to run tests:</p> <pre><code>$ poe test\n</code></pre> <p>And run a watcher to automatically re-run the tests when files change:</p> <pre><code>$ poe test:watch\n</code></pre> <p>You can also run the tests manually using the following command:</p> <pre><code>$ pytest\n</code></pre> <p>The task is set up so we can automatically add other options in the future.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, using this project, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>$ poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>$ poe format\n</code></pre> <p>Lint the code using <code>ruff</code>:</p> <pre><code>$ poe ruff\n</code></pre> <p>Check the Markdown:</p> <pre><code>$ poe markdown\n</code></pre> <p>Run <code>ruff</code>, <code>mypy</code> and <code>format</code> at the same time:</p> <pre><code>$ poe lint\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to <code>github-changelog-md</code>:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using the Ruff   Formatter.</li> <li>Fix any linting errors or warnings. The pre-commit hooks will check for   this also. Ruff is installed and set to pretty   strict settings. Ruff now replaces all the original linters that were   installed. There is also a Markdown linter.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all existing and new tests before submitting a pull   request.</li> <li>Document your code using   docstrings. This project uses the   Google Docstring   Spec though   at this time is a bit slack on listing the Args and Returns. I will be adding   these in as I go along so feel free to add them in if you are contributing .</li> <li>If you add or change any functionality, please update the documentation   accordingly.</li> <li>Use GitHub issues to report   bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code>, <code>MyPy</code> and  <code>Ruff</code> ones are very helpful (the included <code>.vscode</code> folder helps configure these).</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"future-plans/","title":"Future Plans","text":""},{"location":"future-plans/#future-plans","title":"Future Plans","text":"<p>The below is a list of things I'd like to add to the project in the future, and is kinda a 'work list' for me.</p> <p>Everything below will be implemented and are in no particular order or importance.</p>"},{"location":"future-plans/#general","title":"General","text":"<ul> <li>Add a flag to overwrite existing files if the directory exists. Make this   require confirmation. Alternately allow overwrite with confirmation if an   existing/populated directory is found. Add a force flag to skip confirmation.   <code>I think DO NOT allow this when '.' is specified as this could be disastrous</code>.</li> <li>Add cmd line options to specify the project name, author, etc. so the user   doesn't have to enter them manually. <code>Not sure if this is needed once we add   the CLI parameters to the config file. May be useful for automation though</code>.</li> <li>Add a command to the CLI template command to show the template files as a   tree, marking whether each file/folder is from the internal templates or the   user's templates.</li> <li>Implement a 'plugin' functionality where we can specify modified/extra files   to be added to the generated project. This would also add a command line flag   (ie <code>--django</code>, <code>--pydantic</code> or <code>--fastapi</code> or whatever) to use that plugin,   and a config setting to specify using this plugin always. Plugins could be   built-in (provided with the package) or user-defined (in the users   <code>/pymaker/plugins</code> folder or installable via pip). Have a config setting to   specify which plugins are enabled.</li> <li>Include an optional <code>vscode</code> settings file in the generated project, optimized   for python projects. This could include recommended extensions.</li> <li>Perhaps add AUTHORS.md skeleton.</li> <li>Add a default dockerfile? Maybe a docker-compose file as well- Both for this   project and for the generated projects?</li> <li>Update the <code>config</code> CLI command to enable setting/flipping individual config   settings from the command line.</li> <li>check for an existing GitHub repository when the user supplies the repo name   and ask for an alternative if it exists.</li> <li>add option (probably using the eventual plugin functionality) to create a   skeleton <code>typer</code> CLI app.</li> <li>if it creates a new remote GitHub repo, print the GitHub URL to the console,   offer to open it in the browser.</li> <li>when creating a github repo, set the homepage if specified. Options to add   tags? Offer option to create a private repo?</li> <li>add ability to add new licences to the <code>licenses</code> module. Perhaps similar to   the way we modify the templates. This will need a bit of refactoring to the   way we handle licences.</li> </ul>"},{"location":"future-plans/#bugs","title":"Bugs","text":"<ul> <li>None known at this time.</li> </ul>"},{"location":"future-plans/#back-burner","title":"Back Burner","text":"<p>These are ideas that I may or may not implement. They are here for reference.</p> <ul> <li>Modify boolean settings in the config to have the values 'yes', 'no' or 'ask'?   This will be a bit lower priority and not sure if it's worth it.</li> <li>Add some form of 'extra packages' command line option and config setting to   automatically add extra packages to the generated <code>pyproject.toml</code> file.</li> <li>Add template GitHub workflows for CI/CD, testing, etc. CodeQL or is that too   much (I do use it in most of my repos)?</li> <li>Add the <code>actions/stale</code> action to the generated project.</li> </ul>"},{"location":"future-plans/#refactoring-code-cleanup","title":"Refactoring / Code Cleanup","text":"<ul> <li>None planned at this time.</li> </ul>"},{"location":"future-plans/#documentation","title":"Documentation","text":"<ul> <li>Add usage examples and perhaps a walk-through to the documentation. Maybe   with a YouTube video?</li> <li>explain how to add more License templates to the 'licenses' module</li> </ul>"},{"location":"future-plans/#testing","title":"Testing","text":"<ul> <li>Add testing with Pytest (<code>IN PROGRESS</code>)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>It is best to install this package globally, rather than in a virtual environment, as it is intended to be used to create new projects. Since we are using Poetry to manage the dependencies, a virtual environment will be created for you anyway specific to each project you are creating.</p>"},{"location":"installation/#release-version","title":"Release Version","text":"<p>Install the package globally using pip:</p> <pre><code>$ pip install pyproject-maker\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user pyproject-maker\n</code></pre> <p>or use pipx (recommended method)</p> <pre><code>$ pipx install pyproject-maker\n</code></pre>"},{"location":"installation/#bleeding-edge-version","title":"Bleeding Edge Version","text":"<p>It is possible to install the latest development version of the package directly from the repository. In most cases this should be safe to do, but it is possible that the development version may not be stable or have bugs. If you are having issues with the development version, please open an issue on the repository.</p> <p>Use pipx (recommended method):</p> <pre><code>$ pipx install git+https://github.com/seapagan/py-maker\n</code></pre> <p>Using pip:</p> <pre><code>$ pip install git+https://github.com/seapagan/py-maker\n</code></pre> <p>You can also use the <code>--user</code> flag for <code>pip</code> if you do not have permissions to install globally. This is NOT needed for <code>pipx</code>.</p> <p>Lastly, you can clone the repository and install from the local copy:</p> <pre><code>$ git clone https://github.com/seapagan/py-maker\n$ cd py-maker\n$ pip install .\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"tasks/","title":"Task Runner","text":"<p>The task-runner Poe the Poet is installed in the new project as a development dependency which allows us to run simple tasks (similar to <code>npm</code> or <code>yarn</code> scripts).</p> <p>These are run (from within the virtual environment) using the <code>poe</code> command and then the script name, for example:</p> <pre><code>$ poe pre\n</code></pre> <p>To get a list of all available tasks with a description, run:</p> <pre><code>$ poe\n</code></pre> <p>You can define your own, but there are currently several specific ones provided in the new project:</p> <ul> <li><code>pre</code> : Run <code>pre-commit run --all-files</code></li> <li><code>ruff</code>: Run Ruff linter on all Python files in the project.</li> <li><code>format</code>: Run Ruff Formatter on all Python files in the project.</li> <li><code>mypy</code> : Run MyPy type-checker on all Python files in the project.</li> <li> <p><code>markdown</code> : Run pymarkdown on all markdown files in the project.</p> </li> <li> <p><code>lint</code> = Runs ruff, formatter, mypy, markdown in sequence</p> </li> </ul> <p>If you selected to install MkDocs with this project, then there are some extra tasks to help with that:</p> <ul> <li><code>docs:publish</code> : Deploy the documentation to GitHub pages.</li> <li><code>docs:build</code> : Build the documentation locally.</li> <li><code>docs:serve</code> : Serve the documentation locally. Useful during development.</li> <li><code>docs:serve:all</code> : As above, but allows access from other devices on the   network.</li> </ul> <p>There is also a task to run the tests if they were selected:</p> <pre><code>$ poe test\n</code></pre> <p>And run a watcher to automatically re-run the tests when files change:</p> <pre><code>$ poe test:watch\n</code></pre> <p>Finally, you can automatically generate your CHANGELOG.md file using:</p> <pre><code>$ poe changelog\n</code></pre> <p>The changelog uses my Markdown Changelog Generator tool to generate the changelog, check the documentation for that tool for more information.</p> <p>These tasks are all defined in the <code>pyproject.toml</code> file in the <code>[tool.poe.tasks]</code> section. Take a look at this file if you want to add or remove tasks.</p>"},{"location":"usage/","title":"Using PyMaker","text":""},{"location":"usage/#create-a-new-project","title":"Create a new project","text":"<p>To create a new project, run the following command:</p> <pre><code>$ pymaker new &lt;project-folder&gt;\n</code></pre> <p>This will create a new directory with the name you provide.</p> <p>You can create a new project in the current directory by using <code>.</code> as the project folder name. This must be an empty directory:</p> <pre><code>$ mkdir test-project\n$ cd test-project\n$ pymaker new .\n</code></pre> <p>The App will then run the steps needed to get you started quickly:</p> <ol> <li>Copy the template files into the new directory</li> <li>Initialise a git repository</li> <li>Commit the boilerplate to Git</li> </ol> <p>You will be asked a series of questions to customise the new project.</p>"},{"location":"usage/#choose-a-package-name-and-description","title":"Choose a package name and description","text":"<p>When it asks \"Package Name?\" you can choose two variants :</p> <ol> <li>If you are creating a standard Python package that can optionally be    uploaded to PyPI, enter a package name here. Note that underscores (\"_\")    must be used as opposed to dashes (\"-\") to comply with Python package naming    rules. Default is the project folder name with underscores replacing dashes,    spaces or dots.</li> <li>For a stand-alone tool that will not be uploaded to PyPI, or is not a    library, enter '-' for the package name. In this case the <code>main.py</code> will just    be placed in the project root and no package folder will be created or    referenced. You can also specify <code>--standalone</code> on the command line to skip     this question.</li> </ol> <p>For option 1 above, the App will check if the package name is available on PyPI or if it has already been used. In the latter case, you will be asked to choose another name.</p>"},{"location":"usage/#command-line-options","title":"Command line options","text":"<p>There are a few command line options that can be used to customise the build. Command line options override any settings in the config file.</p> <p>For example, if <code>use_git = false</code> is set in the config file, then passing <code>--git</code> on the command line will override this and initialise a Git repository.</p>"},{"location":"usage/#-y-or-yes","title":"<code>-y</code> or <code>--yes</code>","text":"<p>Accept all defaults and do not ask any questions.</p>"},{"location":"usage/#-git-no-git","title":"<code>--git</code> / <code>--no-git</code>","text":"<p>Initialise a Git repository. Default is <code>True</code> unless <code>use_git = false</code> is set in the config file or <code>--no-git</code> is passed on the command line.</p>"},{"location":"usage/#-test-no-test","title":"<code>--test</code> / <code>--no-test</code>","text":"<p>Create a test directory and add the <code>pytest</code> dependency plus a few related plugins to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_testing = false</code> is set in the config file or <code>--no-test</code> is passed on the command line.</p>"},{"location":"usage/#-lint-no-lint","title":"<code>--lint</code> / <code>--no-lint</code>","text":"<p>Add linting dependencies and configuration to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_linters = false</code> is set in the config file or <code>--no-lint</code> is passed on the command line.</p>"},{"location":"usage/#-docs-no-docs","title":"<code>--docs</code> / <code>--no-docs</code>","text":"<p>Add MkDocs and some plugins to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_mkdocs = false</code> is set in the config file or <code>--no-docs</code> is passed on the command line.</p> <p>If you choose to run <code>poetry</code> automatically, this will also add a customized <code>mkdocs.yml</code> file and create a new default MkDocs site in the <code>docs</code> folder. Some useful plugins are also installed and added to the <code>mkdocs.yml</code> file.</p>"},{"location":"usage/#-github-no-github","title":"<code>--github</code> / <code>--no-github</code>","text":"<p>Create a GitHub repository and push the initial commit. Default is <code>True</code> unless <code>create_remote = false</code> is set in the config file or <code>--no-github</code> is passed on the command line. This option needs a GitHub Personal Access Token to be set in the config file, see here</p>"},{"location":"usage/#-standalone","title":"<code>--standalone</code>","text":"<p>Generate a stand-alone script instead of a package. This will place the <code>main.py</code> file in the project root and not create a package folder. This is useful for creating a single script that can be run from the command line. this is equivalent to entering <code>-</code> for the package name.</p>"},{"location":"usage/#-bare","title":"<code>--bare</code>","text":"<p>Generate a project without Testing, linting or documentation libraries and configurations. It will also NOT initialise a Git repository. Currently there is no config file option to do this automatically, you must use the command line option.</p>"},{"location":"usage/#run-poetry-install-automatically","title":"Run <code>poetry install</code> automatically","text":"<p>You will be asked if you want to run <code>poetry install</code> automatically. This will create a virtual environment and install the dependencies, plus also create a bare <code>MkDocs</code> site and configuration. This is the recommended option.</p> <p>You will still need to run <code>poetry shell</code> to activate the virtual environment from inside the new project folder.</p>"},{"location":"usage/#start-developing","title":"Start developing","text":"<p>You should now change into the new directory, install dependencies and activate the virtual environment:</p> <pre><code>$ cd &lt;project-folder&gt;\n$ poetry install # if not done automatically already\n$ poetry shell\n</code></pre> <p>Now, you can start developing </p>"},{"location":"usage/#example-run","title":"Example run","text":"<pre><code>$ pymaker new secret-docs\nPyMaker - Generate a Python project skeleton.\n\nCreating a new project at /home/bathroom/secret-docs\n\nName of the Application? (Secret Docs):\nPackage Name? (Use '-' for standalone script) (secret_docs):\nDescription of the Application?: Store all the Bigly amount of secret documents\nI have in the bathroom\n\nAuthor Name? (): Orange Tango\nAuthor Email? (): bigly@spraytan.org\nApplication License? [None/Apache2/BSD3/BSD2/GPL2/GPL3/LGPL/MIT/MPL2/CDDL/EPL2] (MIT):\n\nCreating a New Python app with the below settings :\n\n    Description : Store all the Bigly amount of secret documents I have in the\n                  bathroom\n   Package Name : secret_docs\n         Author : Orange Tango\n          Email : bigly@straytan.org\n        License : MIT\n    Project Dir : /home/bathroom/secret-docs\n           Name : Secret Docs\n     Standalone : False\n\nIs this correct? [y/n] (y):\n\n--&gt; Creating project folder ... Done\n\nShould I Run 'poetry install' now? [y/n] (y):\nCreating virtualenv secret-docs in /home/bathroom/secret-docs/.venv\nUpdating dependencies\nResolving dependencies... (11.6s)\n\nPackage operations: 103 installs, 1 update, 0 removals\n\n  \u2022 Installing lazy-object-proxy (1.9.0)\n  \u2022 Installing six (1.16.0)\n\n            &lt;snippy snip&gt;\n\n  \u2022 Installing pytest-xdist (3.3.1)\n  \u2022 Installing tryceratops (2.3.2)\n\nWriting lock file\n\nInstalling the current project: secret-docs (0.1.0)\n\n--&gt; Creating MkDocs project\nINFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n\n--&gt; Creating Git repository ... Done\n\n--&gt; Project created successfully.\n\nNext steps:\n\n1. Change to the project directory:\n2. Install the dependencies if not done above (creates a virtual environment):\n  $ poetry install\n3. Activate the virtual environment:\n  $ poetry shell\n4. Run the application:\n  $ secret-docs\n5. Code!\n\nSee the README.md file for more information.\n</code></pre>"},{"location":"template/internal/","title":"The Internal Template","text":"<p>By default, the generated application will have a basic template that you can use to get started, this template is stored inside the package itself. It will contain all you need to get started, including a basic <code>README.md</code> file.</p> <p>The dependency management is handled by Poetry, and we include a <code>pyproject.toml</code> file with several useful dependencies:</p> <ul> <li>PyTest   for testing, along with several useful plugins.</li> <li>Ruff for linting and   formatting. This replaces the need for <code>flake8</code>, <code>black</code>, <code>isort</code> and more.   The default <code>pyproject.toml</code> contains a quite strict configuration by default,   but you can modify it to suit your needs.</li> <li>MyPy for static   type checking.</li> <li>pre-commit for running checks   before committing code.</li> </ul> <p>The <code>pyproject.toml</code> contains a useable configuration for all of these tools, but you can modify it to suit your needs.</p> <p>It also contains several tasks for running the tests, linting, formatting and more. These use the Poe The Poet Poetry extension see Task Runner for more information.</p>"},{"location":"template/modify/","title":"Adding or Modifying files in the template","text":"<p>If you wish to add or change specific files in the template, you can do so by adding them to the <code>~/.pymaker/template</code> folder. The files (and folders) in this folder will be copied to the root of the project when the template is generated.</p> <p>Files in this global template folder will override any files in the default template, so you can for example change the <code>README.md</code> file, add to the <code>.gitignore</code> or even add a complete extra folder structure.</p> <p>If you want to do a major change to the template, you can actually dump the default template to this folder and modify or delete files as you see fit. See the next section for more information on how to do this.</p>"},{"location":"template/replace/","title":"Replacing the Default Template","text":""},{"location":"template/replace/#dump-the-default-template","title":"Dump the Default Template","text":"<p>Should you wish to heavily modify the default template, or even replace it completely, you can do so by dumping the default template to the <code>~/.pymaker/template</code> folder. This will copy all files from the default template to the global template folder, where you can modify or delete them as you see fit.</p> <p>To do this, run the following command:</p> <pre><code>$ pymaker template dump\n</code></pre> <p>This will copy the default template to the global template folder (<code>~/.pymaker/template</code>). You can then modify or delete files as you see fit.</p> <p>Running this command will ask you if you wish to set this exported template as the default template. It will then ask you if you want to disable the internal template. If you answer yes, then the internal template will be disabled, and ONLY the exported template will be used instead. Otherwise, both will still be used with the exported template taking precedence.</p>"},{"location":"template/replace/#change-the-location-of-the-template-folder","title":"Change the location of the Template folder","text":"<p>If you wish to change the location of the template folder, you can do so in 2 ways:</p> <ol> <li>By adding the <code>--local</code> flag to the above command (e.g. <code>pymaker template    dump --local</code>). This will dump the default template to the current folder,     giving you the option to disable the default template if needed. Note that     any files in the folder will be overwritten.</li> <li>By changing to the folder containing your template and running <code>pymaker    template set</code>. This will set the current folder as the template folder and    give you the same option to disable the default template.</li> </ol> <p>You can reset the template location back to the default <code>~/.pymaker/template</code> folder by running the following command:</p> <pre><code>$ pymaker template reset\n</code></pre>"},{"location":"template/replace/#choose-to-use-the-default-template-or-not","title":"Choose to use the Default Template or not","text":"<p>Running the <code>dump</code> command will give you the option to disable the default template completely and ONLY use the exported (or custom) template. You can also do this (or revert back to the default template) by running the following command:</p> <pre><code>$ pymaker template default &lt;enable|disable&gt;\n</code></pre> <p><code>enable</code> will enable the default template, and <code>disable</code> will disable it. Please note that any custom templates you have created will be used regardless, and will overwrite the default template (if enabled) if they have the same file name.</p>"}]}