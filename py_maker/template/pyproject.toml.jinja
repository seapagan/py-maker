[tool.poetry]
name = "{{ slug }}"
version = "0.1.0"
description = "{{ description }}."
authors = ["{{ author }} <{{ email }}>"]
readme = "README.md"
license = "{{ license_name }}"

{% if not standalone %}
packages = [{ include = "{{ package_name }}" }]
{% if homepage %}
homepage = "{{ homepage }}"
{%endif %}
{% if repository %}
repository = "{{ repository }}"
{%endif %}

[tool.poetry.urls]
# customize the below URLs to point to your own GitHub repo. These will be
# shown on [Pypi.org](https://pypi.org/) if you are creating a public package.
"Pull Requests" = "{{ repository }}/pulls"
"Bug Tracker" = "{{ repository }}/issues"
"Changelog" = "{{ repository }}/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
# rename "{{ slug }}" below to change the executable name. You can also
# add more scripts if your package offers multiple commands.
{{ slug }} = "{{ package_name }}.main:app"

{% else%}
package-mode = false

{% endif %}

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configure dev dependencies you can add or remove as needed
[tool.poetry.group.dev.dependencies]
{% if options.lint %}
# linting, type-checking and security checks
mypy = "^1.8.0"
pre-commit = "^3.6.2"
pymarkdownlnt = "^0.9.12"
ruff = "^0.3.0"
{% endif %}

# task runner
poethepoet = "^0.25.0"

{% if options.test %}
# testing
faker = ">=23.3.0"
greenlet = "^3.0.3"
mock = "^5.1.0"
pyfakefs = "^5.3.5"
pytest = "^8.1.0"
pytest-cov = ">=4.1,<6.0"
pytest-xdist = "^3.5.0"
pytest-sugar = ">=1.0.0"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-mock = "^3.12.0"
pytest-watcher = "^0.4.1"
{% endif %}

{% if options.docs %}
# documentation
github-changelog-md = "^0.9.1"
mkdocs = "^1.5.3"
mkdocs-autorefs = ">=1.0.1"
mkdocs-material = "^9.5.12"
mkdocs-git-revision-date-localized-plugin = "^1.2.4"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-minify-plugin = ">=0.8.0"
mkdocstrings = ">=0.24.1"
pymdown-extensions = "^10.7"
pygments = "^2.17.2"
{% endif %}

# setup PoeThePoet tasks
[tool.poe.tasks]
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
{% if options.lint %}
mypy.cmd = "mypy {{ package_name }}/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r {{ package_name }}/**/[!CHANGELOG,!.github/]*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"
{% endif %}

{% if options.test %}
test.cmd = "pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"
{% endif %}

{% if options.docs %}
"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"
{% endif %}

# generate a CHANGELOG.md file from GitHub releases
changelog.cmd = "github-changelog-md"
changelog.help = "Generate a CHANGELOG.md file"

{% if options.lint %}
# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false

[tool.ruff]
line-length = 80
lint.select = ["ALL"] # we are being very strict!
lint.ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
lint.extend-ignore = [
  "COM812",
  "ISC001",
] # these are ignored for ruff formatting

src = ["{{ package_name }}"]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
]

[tool.ruff.lint.isort]
known-first-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"
{% endif %}

{% if options.test %}
# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html"
]
filterwarnings = []
mock_use_standalone_module = true
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting", # will be skipped automatically
]

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
{% endif %}
